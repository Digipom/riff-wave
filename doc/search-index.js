var searchIndex = {};
searchIndex["riff_wave"] = {"doc":"Basic support for reading and writing wave PCM files.","items":[[3,"WaveReader","riff_wave","Helper struct that takes ownership of a reader and can be used to read data\nfrom a PCM wave file.",null,null],[12,"pcm_format","","Represents the PCM format for this wave file.",0,null],[3,"WaveWriter","","Helper struct that takes ownership of a writer and can be used to write data\nto a PCM wave file.",null,null],[12,"pcm_format","","Represents the PCM format for this wave file.",1,null],[3,"PcmFormat","","",null,null],[12,"num_channels","","",2,null],[12,"sample_rate","","",2,null],[12,"bits_per_sample","","",2,null],[4,"ReadError","","Represents an error that occurred while reading a wave file.",null,null],[13,"Format","","The file format is incorrect or unsupported.",3,null],[13,"Io","","An IO error occurred.",3,null],[4,"ReadErrorKind","","Represents a file format error, when the wave file is incorrect or unsupported.",null,null],[13,"NotARiffFile","","The file does not start with a &quot;RIFF&quot; tag and chunk size.",4,null],[13,"NotAWaveFile","","The file doesn&#39;t continue with &quot;WAVE&quot; after the RIFF chunk header.",4,null],[13,"NotAnUncompressedPcmWaveFile","","This file is not an uncompressed PCM wave file. Only uncompressed files are supported.",4,null],[13,"FmtChunkTooShort","","This file is missing header data and can&#39;t be parsed.",4,null],[13,"NumChannelsIsZero","","The number of channels is zero, which is invalid.",4,null],[13,"SampleRateIsZero","","The sample rate is zero, which is invalid.",4,null],[13,"UnsupportedBitsPerSample","","Only 8-bit, 16-bit, 24-bit and 32-bit PCM files are supported.",4,null],[13,"InvalidBitsPerSample","","We don&#39;t currently support extended PCM wave files where the actual\nbits per sample is less than the container size.",4,null],[4,"WriteError","","",null,null],[13,"ExceededMaxSize","","Wave files are limited to 4GB in size.",5,null],[13,"Io","","An IO error occurred.",5,null],[4,"Format","","",null,null],[13,"UncompressedPcm","","",6,null],[13,"Extended","","",6,null],[11,"fmt","","",3,{"inputs":[{"name":"readerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"readerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"readerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"readerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"readerror"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"readerror"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"readerror"}}],[11,"new","","Returns a new wave reader for the given reader.",0,{"inputs":[{"name":"t"}],"output":{"name":"readresult"}}],[11,"read_sample_u8","","Reads a single sample as an unsigned 8-bit value.",0,{"inputs":[{"name":"wavereader"}],"output":{"name":"result"}}],[11,"read_sample_i16","","Reads a single sample as a signed 16-bit value.",0,{"inputs":[{"name":"wavereader"}],"output":{"name":"result"}}],[11,"read_sample_i24","","Reads a single sample as a signed 24-bit value. The value will be padded\nto fit in a 32-bit buffer.",0,{"inputs":[{"name":"wavereader"}],"output":{"name":"result"}}],[11,"read_sample_i32","","Reads a single sample as a signed 32-bit value.",0,{"inputs":[{"name":"wavereader"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this reader, returning the underlying value.",0,{"inputs":[{"name":"wavereader"}],"output":{"name":"t"}}],[11,"fmt","","",5,{"inputs":[{"name":"writeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"writeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"writeerror"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"writeerror"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"writeerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"wavewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new wave writer for the given writer.\n# Panics\nPanics if num_channels or sample_rate is zero, or if bits_per_sample\ndoesn&#39;t match 8, 16, 24, or 32.",1,{"inputs":[{"name":"u16"},{"name":"u32"},{"name":"u16"},{"name":"t"}],"output":{"name":"writeresult"}}],[11,"write_sample_u8","","Writes a single sample as an unsigned 8-bit value.",1,{"inputs":[{"name":"wavewriter"},{"name":"u8"}],"output":{"name":"writeresult"}}],[11,"write_sample_i16","","Writes a single sample as a signed 16-bit value.",1,{"inputs":[{"name":"wavewriter"},{"name":"i16"}],"output":{"name":"writeresult"}}],[11,"write_sample_i24","","Writes a single sample as a signed 24-bit value. The value will be truncated\nto fit in a 24-bit value.",1,{"inputs":[{"name":"wavewriter"},{"name":"i32"}],"output":{"name":"writeresult"}}],[11,"write_sample_i32","","Writes a single sample as a signed 32-bit value.",1,{"inputs":[{"name":"wavewriter"},{"name":"i32"}],"output":{"name":"writeresult"}}],[11,"sync_header","","Updates the header at the beginning of the file with the new chunk sizes.",1,{"inputs":[{"name":"wavewriter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"wavewriter"}],"output":null}],[6,"ReadResult","","Represents a result when reading a wave file.",null,null],[6,"WriteResult","","Represents a result when reading a wave file.",null,null],[17,"FORMAT_UNCOMPRESSED_PCM","","",null,null],[17,"FORMAT_EXTENDED","","",null,null],[17,"MIN_I24_VALUE","","",null,null],[17,"MAX_I24_VALUE","","",null,null],[11,"fmt","","",6,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"pcmformat"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"WaveReader"],[3,"WaveWriter"],[3,"PcmFormat"],[4,"ReadError"],[4,"ReadErrorKind"],[4,"WriteError"],[4,"Format"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
initSearch(searchIndex);
