var searchIndex = JSON.parse('{\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":[4,8,4,6,6,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11],"n":["BigEndian","ByteOrder","LittleEndian","NativeEndian","NetworkEndian","ReadBytesExt","WriteBytesExt","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","read_f32","read_f32","read_f32","read_f64","read_f64","read_f64","read_i16","read_i16","read_i16","read_i32","read_i32","read_i32","read_i64","read_i64","read_i64","read_i8","read_i8","read_int","read_int","read_int","read_u16","read_u16","read_u16","read_u16","read_u16","read_u32","read_u32","read_u32","read_u32","read_u32","read_u64","read_u64","read_u64","read_u64","read_u64","read_u8","read_u8","read_uint","read_uint","read_uint","read_uint","read_uint","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32","write_f32","write_f64","write_f64","write_f64","write_i16","write_i16","write_i16","write_i32","write_i32","write_i32","write_i64","write_i64","write_i64","write_i8","write_i8","write_int","write_int","write_int","write_u16","write_u16","write_u16","write_u16","write_u16","write_u32","write_u32","write_u32","write_u32","write_u32","write_u64","write_u64","write_u64","write_u64","write_u64","write_u8","write_u8","write_uint","write_uint","write_uint","write_uint","write_uint"],"q":["byteorder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Defines big-endian serialization.","ByteOrder describes types that can serialize integers as …","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","Extends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…","Extends <code>Write</code> with methods for writing numbers. (For …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a signed 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 16 bit integer from the underlying …","Reads an unsigned 16 bit integer from the underlying …","","","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 32 bit integer from the underlying …","Reads an unsigned 32 bit integer from the underlying …","","","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 64 bit integer from the underlying …","Reads an unsigned 64 bit integer from the underlying …","","","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes a signed 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 16 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying writer.","","","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 32 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying writer.","","","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 64 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying writer.","","","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,3,3,4,3,3,4,3,3,4,3,3,4,3,3,4,3,3,3,3,4,4,3,3,1,2,4,3,3,1,2,4,3,3,1,2,3,3,4,3,3,1,2,1,2,1,2,1,2,5,5,4,5,5,4,5,5,4,5,5,4,5,5,4,5,5,5,5,4,4,5,5,1,2,4,5,5,1,2,4,5,5,1,2,5,5,4,5,5,1,2],"f":[null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[["",0]],["result",6,[["f32",0]]]],[[["",0]],["result",6,[["f32",0]]]],[[],["f32",0]],[[["",0]],["result",6,[["f64",0]]]],[[["",0]],["result",6,[["f64",0]]]],[[],["f64",0]],[[["",0]],["result",6,[["i16",0]]]],[[["",0]],["result",6,[["i16",0]]]],[[],["i16",0]],[[["",0]],["result",6,[["i32",0]]]],[[["",0]],["result",6,[["i32",0]]]],[[],["i32",0]],[[["",0]],["result",6,[["i64",0]]]],[[["",0]],["result",6,[["i64",0]]]],[[],["i64",0]],[[["",0]],["result",6,[["i8",0]]]],[[["",0]],["result",6,[["i8",0]]]],[[["",0],["usize",0]],["result",6,[["i64",0]]]],[[["",0],["usize",0]],["result",6,[["i64",0]]]],[[["usize",0]],["i64",0]],[[],["u16",0]],[[["",0]],["result",6,[["u16",0]]]],[[["",0]],["result",6,[["u16",0]]]],[[],["u16",0]],[[],["u16",0]],[[],["u32",0]],[[["",0]],["result",6,[["u32",0]]]],[[["",0]],["result",6,[["u32",0]]]],[[],["u32",0]],[[],["u32",0]],[[],["u64",0]],[[["",0]],["result",6,[["u64",0]]]],[[["",0]],["result",6,[["u64",0]]]],[[],["u64",0]],[[],["u64",0]],[[["",0]],["result",6,[["u8",0]]]],[[["",0]],["result",6,[["u8",0]]]],[[["usize",0]],["u64",0]],[[["",0],["usize",0]],["result",6,[["u64",0]]]],[[["",0],["usize",0]],["result",6,[["u64",0]]]],[[["usize",0]],["u64",0]],[[["usize",0]],["u64",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["f32",0]],["result",6]],[[["",0],["f32",0]],["result",6]],[[["f32",0]]],[[["",0],["f64",0]],["result",6]],[[["",0],["f64",0]],["result",6]],[[["f64",0]]],[[["",0],["i16",0]],["result",6]],[[["",0],["i16",0]],["result",6]],[[["i16",0]]],[[["",0],["i32",0]],["result",6]],[[["",0],["i32",0]],["result",6]],[[["i32",0]]],[[["",0],["i64",0]],["result",6]],[[["",0],["i64",0]],["result",6]],[[["i64",0]]],[[["",0],["i8",0]],["result",6]],[[["",0],["i8",0]],["result",6]],[[["",0],["i64",0],["usize",0]],["result",6]],[[["",0],["i64",0],["usize",0]],["result",6]],[[["i64",0],["usize",0]]],[[["u16",0]]],[[["",0],["u16",0]],["result",6]],[[["",0],["u16",0]],["result",6]],[[["u16",0]]],[[["u16",0]]],[[["u32",0]]],[[["",0],["u32",0]],["result",6]],[[["",0],["u32",0]],["result",6]],[[["u32",0]]],[[["u32",0]]],[[["u64",0]]],[[["",0],["u64",0]],["result",6]],[[["",0],["u64",0]],["result",6]],[[["u64",0]]],[[["u64",0]]],[[["",0],["u8",0]],["result",6]],[[["",0],["u8",0]],["result",6]],[[["u64",0],["usize",0]]],[[["",0],["u64",0],["usize",0]],["result",6]],[[["",0],["u64",0],["usize",0]],["result",6]],[[["u64",0],["usize",0]]],[[["u64",0],["usize",0]]]],"p":[[4,"BigEndian"],[4,"LittleEndian"],[8,"ReadBytesExt"],[8,"ByteOrder"],[8,"WriteBytesExt"]]},\
"riff_wave":{"doc":"Basic support for reading and writing wave PCM files.","t":[13,13,17,17,13,4,13,13,13,13,17,17,13,13,13,13,3,4,4,6,13,13,13,3,3,4,6,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["ExceededMaxSize","Extended","FORMAT_EXTENDED","FORMAT_UNCOMPRESSED_PCM","FmtChunkTooShort","Format","Format","InvalidBitsPerSample","Io","Io","MAX_I24_VALUE","MIN_I24_VALUE","NotARiffFile","NotAWaveFile","NotAnUncompressedPcmWaveFile","NumChannelsIsZero","PcmFormat","ReadError","ReadErrorKind","ReadResult","SampleRateIsZero","UncompressedPcm","UnsupportedBitsPerSample","WaveReader","WaveWriter","WriteError","WriteResult","bits_per_sample","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","cause","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into_inner","new","new","num_channels","pcm_format","pcm_format","read_sample_i16","read_sample_i24","read_sample_i32","read_sample_u8","sample_rate","sync_header","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_sample_i16","write_sample_i24","write_sample_i32","write_sample_u8","0","0","0","0","0","1","0"],"q":["riff_wave","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","riff_wave::ReadError","","riff_wave::ReadErrorKind","","","","riff_wave::WriteError"],"d":["Wave files are limited to 4GB in size.","","","","This file is missing header data and can’t be parsed.","","The file format is incorrect or unsupported.","We don’t currently support extended PCM wave files where …","An IO error occurred.","An IO error occurred.","","","The file does not start with a “RIFF” tag and chunk …","The file doesn’t continue with “WAVE” after the RIFF …","This file is not an uncompressed PCM wave file. Only …","The number of channels is zero, which is invalid.","","Represents an error that occurred while reading a wave …","Represents a file format error, when the wave file is …","Represents a result when reading a wave file.","The sample rate is zero, which is invalid.","","Only 8-bit, 16-bit, 24-bit and 32-bit PCM files are …","Helper struct that takes ownership of a reader and can be …","Helper struct that takes ownership of a writer and can be …","","Represents a result when reading a wave file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this reader, returning the underlying value.","Returns a new wave reader for the given reader.","Returns a new wave writer for the given writer.","","Represents the PCM format for this wave file.","Represents the PCM format for this wave file.","Reads a single sample as a signed 16-bit value.","Reads a single sample as a signed 24-bit value. The value …","Reads a single sample as a signed 32-bit value.","Reads a single sample as an unsigned 8-bit value.","","Updates the header at the beginning of the file with the …","","","","","","","","","","","","","","","","","","","","","","","","","Writes a single sample as a signed 16-bit value.","Writes a single sample as a signed 24-bit value. The value …","Writes a single sample as a signed 32-bit value.","Writes a single sample as an unsigned 8-bit value.","","","","","","",""],"i":[1,2,0,0,3,0,4,3,4,1,0,0,3,3,3,3,0,0,0,0,3,2,3,0,0,0,0,5,6,4,3,1,7,2,5,6,4,3,1,7,2,5,4,1,7,4,4,3,3,1,1,7,2,5,6,4,4,3,1,1,7,2,5,6,4,3,1,7,2,5,6,6,7,5,6,7,6,6,6,6,5,7,4,3,1,6,4,3,1,7,2,5,6,4,3,1,7,2,5,6,4,3,1,7,2,5,7,7,7,7,8,9,10,11,12,12,13],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["error",3]],["readerror",4]],[[]],[[]],[[["error",3]],["writeerror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["readresult",6,[["wavereader",3]]]],[[["u16",0],["u32",0],["u16",0]],["writeresult",6,[["wavewriter",3]]]],null,null,null,[[["",0]],["result",6,[["i16",0]]]],[[["",0]],["result",6,[["i32",0]]]],[[["",0]],["result",6,[["i32",0]]]],[[["",0]],["result",6,[["u8",0]]]],null,[[["",0]],["result",6]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["i16",0]],["writeresult",6]],[[["",0],["i32",0]],["writeresult",6]],[[["",0],["i32",0]],["writeresult",6]],[[["",0],["u8",0]],["writeresult",6]],null,null,null,null,null,null,null],"p":[[4,"WriteError"],[4,"Format"],[4,"ReadErrorKind"],[4,"ReadError"],[3,"PcmFormat"],[3,"WaveReader"],[3,"WaveWriter"],[13,"Format"],[13,"Io"],[13,"NotAnUncompressedPcmWaveFile"],[13,"UnsupportedBitsPerSample"],[13,"InvalidBitsPerSample"],[13,"Io"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};